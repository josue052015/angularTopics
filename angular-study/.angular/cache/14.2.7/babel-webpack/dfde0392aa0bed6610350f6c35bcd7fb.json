{"ast":null,"code":"import { interval } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction PipesComponent_li_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" hello my \", item_r1.key, \" is \", item_r1.value, \" \");\n  }\n}\n\nexport class PipesComponent {\n  constructor() {\n    this.date = new Date();\n    this.amount = 10000.3756;\n    this.percent = 0.50; //i18n pipes show something based on the value in the map (the value to compare comes from the property that we applied the pipe)\n    //i18n select\n\n    this.personNumbers = '1';\n    this.personNumbersMap = {\n      '1': 'invitarlo',\n      '2': 'invitarlos'\n    }; //i18n plural \n    // unlike i18n select, i18n plural select the value based on conditions. So, you can have a dynamic result\n    //If we change the information here, the message will display based on the quantity of pillars\n\n    this.pillars = ['tomioka', 'rengoku', 'zanemi'];\n    this.pillarsMap = {\n      '=0': 'there´s no pillar here',\n      '=1': 'We have one pillar here',\n      'other': 'We have # pillars here'\n    };\n    this.objectExample = {\n      name: 'Pedro',\n      lastName: 'Rodriguez'\n    }; //interval is a rxjs method that creates an Observable that emits sequential numbers every specified interval of time\n\n    this.counterObservable = interval(1000);\n  }\n\n}\n\nPipesComponent.ɵfac = function PipesComponent_Factory(t) {\n  return new (t || PipesComponent)();\n};\n\nPipesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PipesComponent,\n  selectors: [[\"app-pipes\"]],\n  decls: 39,\n  vars: 41,\n  consts: [[4, \"ngFor\", \"ngForOf\"]],\n  template: function PipesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"hr\");\n      i0.ɵɵelementStart(1, \"h1\");\n      i0.ɵɵtext(2, \"pipes\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"br\");\n      i0.ɵɵelementStart(4, \"p\");\n      i0.ɵɵtext(5);\n      i0.ɵɵpipe(6, \"date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"p\");\n      i0.ɵɵtext(8);\n      i0.ɵɵpipe(9, \"date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"p\");\n      i0.ɵɵtext(11);\n      i0.ɵɵpipe(12, \"number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"p\");\n      i0.ɵɵtext(14);\n      i0.ɵɵpipe(15, \"number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"p\");\n      i0.ɵɵtext(17);\n      i0.ɵɵpipe(18, \"currency\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"p\");\n      i0.ɵɵtext(20);\n      i0.ɵɵpipe(21, \"percent\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"p\");\n      i0.ɵɵtext(23);\n      i0.ɵɵpipe(24, \"i18nSelect\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"p\");\n      i0.ɵɵtext(26);\n      i0.ɵɵpipe(27, \"i18nPlural\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"p\");\n      i0.ɵɵtext(29);\n      i0.ɵɵpipe(30, \"slice\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(31, \"p\");\n      i0.ɵɵtext(32, \"keyValue pipe:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"ul\");\n      i0.ɵɵtemplate(34, PipesComponent_li_34_Template, 2, 2, \"li\", 0);\n      i0.ɵɵpipe(35, \"keyvalue\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"p\");\n      i0.ɵɵtext(37);\n      i0.ɵɵpipe(38, \"async\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate1(\"date normal: \", i0.ɵɵpipeBind1(6, 11, ctx.date), \"\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"format date: \", i0.ɵɵpipeBind2(9, 13, ctx.date, \"MM/dd/YYYY\"), \"\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"number pipe: \", i0.ɵɵpipeBind1(12, 16, ctx.amount), \"\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"format number pipe: \", i0.ɵɵpipeBind2(15, 18, ctx.amount, \"1.2-2\"), \"\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"currency pipe: \", i0.ɵɵpipeBind3(18, 21, ctx.amount, \"USD\", \"symbol-narrow\"), \"\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"percent pipe: \", i0.ɵɵpipeBind1(21, 25, ctx.percent), \"\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"i18n select pipe: es un placer \", i0.ɵɵpipeBind2(24, 27, ctx.personNumbers, ctx.personNumbersMap), \"\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"i18n plural pipe: are you waiting for pillars? \", i0.ɵɵpipeBind2(27, 30, ctx.pillars.length, ctx.pillarsMap), \"\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"slice pipe: \", i0.ɵɵpipeBind3(30, 33, ctx.pillars, 0, 2), \"\");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(35, 37, ctx.objectExample));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"async pipe \", i0.ɵɵpipeBind1(38, 39, ctx.counterObservable), \"\");\n    }\n  },\n  dependencies: [i1.NgForOf, i1.AsyncPipe, i1.SlicePipe, i1.DecimalPipe, i1.PercentPipe, i1.CurrencyPipe, i1.DatePipe, i1.I18nPluralPipe, i1.I18nSelectPipe, i1.KeyValuePipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwaXBlcy5jb21wb25lbnQuc2NzcyJ9 */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,QAAT,QAAyB,MAAzB;;;;;;ICkBIC;IACIA;IACJA;;;;;IADIA;IAAAA;;;;ADZR,OAAM,MAAOC,cAAP,CAAqB;EAL3BC;IAOE,YAAO,IAAIC,IAAJ,EAAP;IACA,cAAS,UAAT;IACA,eAAU,IAAV,CATF,CAWA;IAEE;;IACA,qBAAgB,GAAhB;IAEA,wBAAmB;MACjB,KAAK,WADY;MAEjB,KAAK;IAFY,CAAnB,CAhBF,CAqBE;IAEA;IAEA;;IACA,eAAU,CAAC,SAAD,EAAY,SAAZ,EAAsB,QAAtB,CAAV;IAEA,kBAAa;MACX,MAAM,wBADK;MAEX,MAAM,yBAFK;MAGX,SAAS;IAHE,CAAb;IAMA,qBAAgB;MACdC,IAAI,EAAC,OADS;MAEdC,QAAQ,EAAE;IAFI,CAAhB,CAlCF,CAuCE;;IACA,yBAAoBN,QAAQ,CAAC,IAAD,CAA5B;EAED;;AArC0B;;;mBAAdE;AAAc;;;QAAdA;EAAcK;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCR3BV;MACAA;MAAIA;MAAKA;MACTA;MACAA;MAAGA;;MAA4BA;MAC/BA;MAAGA;;MAAyCA;MAE5CA;MAAGA;;MAAgCA;MAGnCA;MAAGA;;MAA+CA;MAClDA;MAAGA;;MAA0DA;MAC7DA;MAAGA;;MAAmCA;MACtCA;MAAGA;;MAA+EA;MAClFA;MAAGA;;MAA0FA;MAE7FA;MAAGA;;MAAoCA;MAEvCA;MAAGA;MAAcA;MACjBA;MACIA;;MAGJA;MAIAA;MAAGA;;MAAwCA;;;;MAvBxCA;MAAAA;MACAA;MAAAA;MAEAA;MAAAA;MAGAA;MAAAA;MACAA;MAAAA;MACAA;MAAAA;MACAA;MAAAA;MACAA;MAAAA;MAEAA;MAAAA;MAIsBA;MAAAA;MAOtBA;MAAAA","names":["interval","i0","PipesComponent","constructor","Date","name","lastName","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["J:\\programming stuff\\Angular learning\\angularStudy\\angular-study\\src\\app\\components\\pipes\\pipes.component.ts","J:\\programming stuff\\Angular learning\\angularStudy\\angular-study\\src\\app\\components\\pipes\\pipes.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { interval } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-pipes',\r\n  templateUrl: './pipes.component.html',\r\n  styleUrls: ['./pipes.component.scss']\r\n})\r\nexport class PipesComponent  {\r\n\r\n  date = new Date ()\r\n  amount = 10000.3756\r\n  percent = 0.50\r\n\r\n//i18n pipes show something based on the value in the map (the value to compare comes from the property that we applied the pipe)\r\n\r\n  //i18n select\r\n  personNumbers = '1'\r\n\r\n  personNumbersMap = {\r\n    '1': 'invitarlo',\r\n    '2': 'invitarlos'\r\n  }\r\n\r\n  //i18n plural \r\n\r\n  // unlike i18n select, i18n plural select the value based on conditions. So, you can have a dynamic result\r\n\r\n  //If we change the information here, the message will display based on the quantity of pillars\r\n  pillars = ['tomioka', 'rengoku','zanemi']\r\n\r\n  pillarsMap = {\r\n    '=0': 'there´s no pillar here',\r\n    '=1': 'We have one pillar here',\r\n    'other': 'We have # pillars here'\r\n  }\r\n\r\n  objectExample = {\r\n    name:'Pedro',\r\n    lastName: 'Rodriguez'\r\n  }\r\n\r\n  //interval is a rxjs method that creates an Observable that emits sequential numbers every specified interval of time\r\n  counterObservable = interval(1000)\r\n\r\n}\r\n","<hr>\r\n<h1>pipes</h1>\r\n<br />\r\n<p>date normal: {{date | date}}</p>\r\n<p>format date: {{date | date:'MM/dd/YYYY'}}</p>\r\n<!-- the number pipe rounds the decimal amounts -->\r\n<p>number pipe: {{amount | number}}</p>\r\n<!-- the first position '1.2-2' in our case is \"1\" is for indicate that we want the integer amount but we can put '.2-2' as well -->\r\n<!-- '.2-2' is to indicate the rank of decimals -->\r\n<p>format number pipe: {{amount | number:'1.2-2'}}</p>\r\n<p>currency pipe: {{amount | currency:'USD':'symbol-narrow'}}</p>\r\n<p>percent pipe: {{percent | percent}}</p>\r\n<p>i18n select pipe: es un placer {{personNumbers | i18nSelect: personNumbersMap}}</p>\r\n<p>i18n plural pipe: are you waiting for pillars? {{pillars.length | i18nPlural: pillarsMap}}</p>\r\n<!-- slice is for show a text or array only in certain indexs from 'start' to 'end'. But, 'end' is excluded from the selection -->\r\n<p>slice pipe: {{pillars | slice: 0:2}}</p>\r\n<!-- keyValue pipe is for iterate objects in the ui -->\r\n<p>keyValue pipe:</p>\r\n<ul>\r\n    <li *ngFor=\"let item of objectExample | keyvalue\">\r\n        hello my {{item.key}} is {{item.value}}\r\n    </li>\r\n</ul>\r\n\r\n<!-- async pipe, subscribes to an observable and every change in the observable will be reflected on the screen -->\r\n\r\n<p>async pipe {{counterObservable | async}}</p>"]},"metadata":{},"sourceType":"module"}